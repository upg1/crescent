generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  parentOf       User[]          @relation("ParentChild")
  children       User[]          @relation("ParentChild")
  accessSettings AccessSettings?
  analytics      Analytics[]
  feedback       Feedback[]
  notes          Note[]
  progress       Progress[]
  scholarParent  ScholarLink[]   @relation("ParentScholarLinks")
  scholarChild   ScholarLink[]   @relation("ScholarScholarLinks")
  palaces        Palace[]        // Memory palaces created by this user
  taughtClasses  Class[]         @relation("TeacherClasses") // Classes taught by the teacher
  enrolledClasses ClassEnrollment[] // Classes the student is enrolled in

  @@map("users")
}

model AccessSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  timeLimit            Int?
  contentFilters       String[]
  notificationsEnabled Boolean  @default(true)
  progressReports      Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model Note {
  id           String   @id @default(cuid())
  title        String
  content      String
  userId       String
  tags         String[]
  type         String?
  conceptId    String?
  parentNoteId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isParentNote Boolean  @default(false)
  noteRole     String   @default("personal")
  position     String?
  sourceId     String?
  sourceType   String?
  visibility   String   @default("private")
  // Memory structure fields
  mnemonicType String?   // "storyMethod", "memoryPalace", "none"
  mnemonicData Json?     // For storing mnemonic structure data
  processed    Boolean   @default(false) // Indicates if a note has been processed into a memory structure

  // Relations
  concept       Concept? @relation(fields: [conceptId], references: [id])
  parentNote    Note?    @relation("NoteHierarchy", fields: [parentNoteId], references: [id])
  childNotes    Note[]   @relation("NoteHierarchy")
  user          User     @relation(fields: [userId], references: [id])
  relatedNotes  Note[]   @relation("NoteRelations")
  relatedNote   Note?    @relation("NoteRelations", fields: [relatedNoteId], references: [id])
  relatedNoteId String?
  memoryNodes   MemoryNode[]

  @@unique([title, userId])
  @@map("notes")
}

model Concept {
  id              String    @id @default(cuid())
  name            String    @unique
  description     String?
  parentConceptId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  parentConcept   Concept?  @relation("ConceptHierarchy", fields: [parentConceptId], references: [id])
  childConcepts   Concept[] @relation("ConceptHierarchy")
  notes           Note[]
}

model Course {
  id          String     @id @default(cuid())
  title       String
  description String?
  slug        String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  books       Book[]
  progress    Progress[]
  feedback    Feedback[]
  lessons     Lesson[]
  classes     Class[]    // All class instances of this course
}

model Book {
  id          String     @id @default(cuid())
  title       String
  description String?
  slug        String     @unique
  courseId    String?
  course      Course?    @relation(fields: [courseId], references: [id])
  chapters    Chapter[]
  progress    Progress[]
  feedback    Feedback[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  book       Book        @relation(fields: [bookId], references: [id])
  bookId     String
  sections   Section[]
  progress   Progress[]
  feedback   Feedback[]

  @@unique([title, bookId])
  @@map("chapters")
}

model Section {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  chapter     Chapter     @relation(fields: [chapterId], references: [id])
  chapterId   String
  paragraphs  Paragraph[]
  exercises   Exercise[]
  figures     Figure[]
  progress    Progress[]
  feedback    Feedback[]

  @@unique([title, chapterId])
  @@map("sections")
}

model Paragraph {
  id        String   @id @default(cuid())
  content   String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  section   Section    @relation(fields: [sectionId], references: [id])
  sectionId String
  progress  Progress[]
  feedback  Feedback[]

  @@unique([content, sectionId])
  @@map("paragraphs")
}

model Exercise {
  id              String   @id @default(cuid())
  content         String
  solution        String?
  order           Int
  difficultyLevel String?  // "easy", "medium", "hard"
  type            String?  // "multiple-choice", "fill-in", "problem-solving", etc.
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  section      Section    @relation(fields: [sectionId], references: [id])
  sectionId    String
  progress     Progress[]
  feedback     Feedback[]
  
  @@unique([content, sectionId])
  @@map("exercises")
}

model Figure {
  id          String   @id @default(cuid())
  title       String?
  caption     String?
  imageUrl    String
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  section     Section    @relation(fields: [sectionId], references: [id])
  sectionId   String
  progress    Progress[]
  feedback    Feedback[]
  
  @@map("figures")
}

model Progress {
  id          String     @id @default(cuid())
  userId      String
  courseId    String?
  lessonId    String?
  bookId      String?
  chapterId   String?
  sectionId   String?
  paragraphId String?
  exerciseId  String?
  figureId    String?
  completed   Boolean    @default(false)
  score       Float?
  timeSpent   Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course?    @relation(fields: [courseId], references: [id], onDelete: SetNull)
  book        Book?      @relation(fields: [bookId], references: [id], onDelete: SetNull)
  chapter     Chapter?   @relation(fields: [chapterId], references: [id], onDelete: SetNull)
  section     Section?   @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  paragraph   Paragraph? @relation(fields: [paragraphId], references: [id], onDelete: SetNull)
  exercise    Exercise?  @relation(fields: [exerciseId], references: [id], onDelete: SetNull)
  figure      Figure?    @relation(fields: [figureId], references: [id], onDelete: SetNull)
  lesson      Lesson?    @relation(fields: [lessonId], references: [id], onDelete: SetNull)
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String?
  courseId    String
  course      Course     @relation(fields: [courseId], references: [id])
  progress    Progress[]
  feedback    Feedback[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  event     String
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Feedback {
  id             String     @id @default(cuid())
  userId         String
  courseId       String?
  bookId         String?
  chapterId      String?
  sectionId      String?
  paragraphId    String?
  exerciseId     String?
  figureId       String?
  lessonId       String?
  elementContent String?
  feedbackType   String
  comment        String?
  status         String     @default("pending")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  user           User       @relation(fields: [userId], references: [id])
  course         Course?    @relation(fields: [courseId], references: [id])
  book           Book?      @relation(fields: [bookId], references: [id])
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  section        Section?   @relation(fields: [sectionId], references: [id])
  paragraph      Paragraph? @relation(fields: [paragraphId], references: [id])
  exercise       Exercise?  @relation(fields: [exerciseId], references: [id])
  figure         Figure?    @relation(fields: [figureId], references: [id])
  lesson         Lesson?    @relation(fields: [lessonId], references: [id])
}

model ScholarLink {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  parent  User @relation("ParentScholarLinks", fields: [parentId], references: [id])
  scholar User @relation("ScholarScholarLinks", fields: [scholarId], references: [id])

  // Fields
  parentId   String
  scholarId  String
  linkCode   String     @unique
  status     LinkStatus @default(APPROVED)
  expiresAt  DateTime
  verifiedAt DateTime?

  @@unique([parentId, scholarId])
  @@map("scholar_links")
}

// Memory structure models
model MemoryNode {
  id          String   @id @default(cuid())
  noteId      String
  content     String   // The actual fact/concept to be remembered
  imageUrl    String?  // Optional image representation
  description String?  // Text description for the memory aid
  position    Int      // Position in the memory structure (for memory palace)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  storyNode   StoryNode?
  palaceNode  PalaceNode?
  
  @@map("memory_nodes")
}

model StoryNode {
  id            String   @id @default(cuid())
  memoryNodeId  String   @unique
  storyText     String   // The story element that represents the fact
  nextNodeId    String?  // For linked list structure
  previousNodeId String? // For bidirectional navigation
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  memoryNode    MemoryNode @relation(fields: [memoryNodeId], references: [id], onDelete: Cascade)
  nextNode      StoryNode? @relation("StorySequence", fields: [nextNodeId], references: [id])
  previousNodes StoryNode[] @relation("StorySequence")
  
  @@map("story_nodes")
}

model PalaceNode {
  id           String   @id @default(cuid())
  memoryNodeId String   @unique
  location     String   // The location in the memory palace
  coordinates  Json?    // Potential spatial coordinates
  roomId       String?  // Organizing nodes by room
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  memoryNode   MemoryNode @relation(fields: [memoryNodeId], references: [id], onDelete: Cascade)
  room         Room?      @relation(fields: [roomId], references: [id])
  
  @@map("palace_nodes")
}

model Room {
  id          String       @id @default(cuid())
  name        String
  description String?
  palaceId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relations
  palace      Palace       @relation(fields: [palaceId], references: [id], onDelete: Cascade)
  palaceNodes PalaceNode[]
  
  @@map("rooms")
}

model Palace {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  rooms Room[]
  
  @@map("palaces")
}

enum UserRole {
  STUDENT
  PARENT
  TEACHER
  STAFF
  ADMIN
}

enum LinkStatus {
  PENDING
  APPROVED
  REJECTED
}

// Class and enrollment models
model Class {
  id          String   @id @default(cuid())
  name        String
  description String?
  courseId    String
  classCode   String   @unique // Unique code for students to join the class
  academicYear String  // e.g., "2024-2025"
  term        String?  // e.g., "Fall", "Spring", "Summer"
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  course      Course   @relation(fields: [courseId], references: [id])
  teacher     User     @relation("TeacherClasses", fields: [teacherId], references: [id])
  teacherId   String
  enrollments ClassEnrollment[]
  assignments Assignment[]
  
  @@map("classes")
}

model ClassEnrollment {
  id          String   @id @default(cuid())
  userId      String
  classId     String
  enrolledAt  DateTime @default(now())
  status      EnrollmentStatus @default(ACTIVE)
  grade       String?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  assignments AssignmentSubmission[]
  
  @@unique([userId, classId])
  @@map("class_enrollments")
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  classId     String
  dueDate     DateTime?
  pointsPossible Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  class       Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]
  
  @@map("assignments")
}

model AssignmentSubmission {
  id           String   @id @default(cuid())
  assignmentId String
  enrollmentId String
  submittedAt  DateTime @default(now())
  content      String?
  score        Float?
  feedback     String?
  status       SubmissionStatus @default(PENDING)
  
  // Relations
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  enrollment   ClassEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  
  @@map("assignment_submissions")
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  DROPPED
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADED
  LATE
  MISSING
}
